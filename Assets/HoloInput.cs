//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/HoloInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HoloInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HoloInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HoloInput"",
    ""maps"": [
        {
            ""name"": ""Hololens"",
            ""id"": ""e8d9ce51-3f25-4a2e-bda4-a2120c61ab08"",
            ""actions"": [
                {
                    ""name"": ""PinchRightHold"",
                    ""type"": ""Button"",
                    ""id"": ""9f8da4d8-4f52-4927-998b-964b6ee7c282"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.6)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PinchRightTap"",
                    ""type"": ""Button"",
                    ""id"": ""7ead7d95-36ba-45f9-b1ac-7015af6393e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SqeezeRight"",
                    ""type"": ""Button"",
                    ""id"": ""77f208bd-50a1-4bf6-8be6-8ed3cb0fe406"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e24c31c-efb1-49e3-83c0-48bec2fe9605"",
                    ""path"": ""<HololensHand>{RightHand}/selectPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PinchRightHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deab94c8-be0c-41f3-8974-e3b40e4f1b59"",
                    ""path"": ""<HololensHand>{RightHand}/squeezePressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SqeezeRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fbbeae0-2101-4fcd-98ec-97bbf73059d8"",
                    ""path"": ""<HololensHand>{RightHand}/selectPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PinchRightTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hololens
        m_Hololens = asset.FindActionMap("Hololens", throwIfNotFound: true);
        m_Hololens_PinchRightHold = m_Hololens.FindAction("PinchRightHold", throwIfNotFound: true);
        m_Hololens_PinchRightTap = m_Hololens.FindAction("PinchRightTap", throwIfNotFound: true);
        m_Hololens_SqeezeRight = m_Hololens.FindAction("SqeezeRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hololens
    private readonly InputActionMap m_Hololens;
    private IHololensActions m_HololensActionsCallbackInterface;
    private readonly InputAction m_Hololens_PinchRightHold;
    private readonly InputAction m_Hololens_PinchRightTap;
    private readonly InputAction m_Hololens_SqeezeRight;
    public struct HololensActions
    {
        private @HoloInput m_Wrapper;
        public HololensActions(@HoloInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PinchRightHold => m_Wrapper.m_Hololens_PinchRightHold;
        public InputAction @PinchRightTap => m_Wrapper.m_Hololens_PinchRightTap;
        public InputAction @SqeezeRight => m_Wrapper.m_Hololens_SqeezeRight;
        public InputActionMap Get() { return m_Wrapper.m_Hololens; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HololensActions set) { return set.Get(); }
        public void SetCallbacks(IHololensActions instance)
        {
            if (m_Wrapper.m_HololensActionsCallbackInterface != null)
            {
                @PinchRightHold.started -= m_Wrapper.m_HololensActionsCallbackInterface.OnPinchRightHold;
                @PinchRightHold.performed -= m_Wrapper.m_HololensActionsCallbackInterface.OnPinchRightHold;
                @PinchRightHold.canceled -= m_Wrapper.m_HololensActionsCallbackInterface.OnPinchRightHold;
                @PinchRightTap.started -= m_Wrapper.m_HololensActionsCallbackInterface.OnPinchRightTap;
                @PinchRightTap.performed -= m_Wrapper.m_HololensActionsCallbackInterface.OnPinchRightTap;
                @PinchRightTap.canceled -= m_Wrapper.m_HololensActionsCallbackInterface.OnPinchRightTap;
                @SqeezeRight.started -= m_Wrapper.m_HololensActionsCallbackInterface.OnSqeezeRight;
                @SqeezeRight.performed -= m_Wrapper.m_HololensActionsCallbackInterface.OnSqeezeRight;
                @SqeezeRight.canceled -= m_Wrapper.m_HololensActionsCallbackInterface.OnSqeezeRight;
            }
            m_Wrapper.m_HololensActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PinchRightHold.started += instance.OnPinchRightHold;
                @PinchRightHold.performed += instance.OnPinchRightHold;
                @PinchRightHold.canceled += instance.OnPinchRightHold;
                @PinchRightTap.started += instance.OnPinchRightTap;
                @PinchRightTap.performed += instance.OnPinchRightTap;
                @PinchRightTap.canceled += instance.OnPinchRightTap;
                @SqeezeRight.started += instance.OnSqeezeRight;
                @SqeezeRight.performed += instance.OnSqeezeRight;
                @SqeezeRight.canceled += instance.OnSqeezeRight;
            }
        }
    }
    public HololensActions @Hololens => new HololensActions(this);
    public interface IHololensActions
    {
        void OnPinchRightHold(InputAction.CallbackContext context);
        void OnPinchRightTap(InputAction.CallbackContext context);
        void OnSqeezeRight(InputAction.CallbackContext context);
    }
}
